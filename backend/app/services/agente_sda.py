#!/usr/bin/env python3
import json
import datetime
import re
import requests
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
from openai import OpenAI
from app.config import settings
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
import os
@dataclass
class EstadoNutricional:
    calorias_consumidas_dia: float = 0
    calorias_consumidas_semana: float = 0
    calorias_consumidas_mes: float = 0
    hidratacao_dia: float = 0
    hidratacao_semana: float = 0
    hidratacao_mes: float = 0
    macros_dia: Dict[str, float] = None
    refeicoes_registradas: List[Dict] = None
    ultima_refeicao: Optional[Dict] = None
    historico_conversas: List[str] = None
    def __post_init__(self):
        if self.macros_dia is None:
            self.macros_dia = {'proteinas': 0, 'carboidratos': 0, 'gorduras': 0, 'fibras': 0}
        if self.refeicoes_registradas is None:
            self.refeicoes_registradas = []
        if self.historico_conversas is None:
            self.historico_conversas = []
class AgenteSDAInteligente:
    def __init__(self, arquivo_dieta: str = None, dieta_dict: Dict = None):
        self.client = OpenAI(api_key=settings.openai_api_key)
        self.openai_model = settings.openai_model
        self.geolocator = Nominatim(user_agent="SDA_NutricionalAgent")
        if dieta_dict:
            self.dieta = dieta_dict
        elif arquivo_dieta:
            self.dieta = self.carregar_dieta(arquivo_dieta)
        else:
            self.dieta = self.carregar_dieta("dieta_usuario.json")
        self.metas = self._calcular_metas_da_dieta()
        self.estado = EstadoNutricional()
    def _calcular_metas_da_dieta(self) -> Dict:
        calorias_diaria = self.dieta.get('calories', {}).get('daily', 2600)
        calorias_semanal = self.dieta.get('calories', {}).get('weekly', calorias_diaria * 7)
        calorias_mensal = self.dieta.get('calories', {}).get('monthly', calorias_diaria * 30)
        hidratacao_diaria = self.dieta.get('hydration', {}).get('daily', 3.5)
        macros = self.dieta.get('macronutrients', {})
        protein_pct = macros.get('protein', {}).get('percentage', 25)
        carb_pct = macros.get('carbohydrates', {}).get('percentage', 43)
        fat_pct = macros.get('fats', {}).get('percentage', 26)
        fiber_g = macros.get('fiber', 30)
        return {
            'calorias_diaria': calorias_diaria,
            'calorias_semanal': calorias_semanal,
            'calorias_mensal': calorias_mensal,
            'hidratacao_diaria': hidratacao_diaria,
            'macros_alvo': {
                'proteinas_pct': protein_pct,
                'carboidratos_pct': carb_pct,
                'gorduras_pct': fat_pct,
                'fibras_g': fiber_g
            }
        }
    def carregar_dieta(self, arquivo: str) -> Dict:
        import os
        base_dir = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
        arquivo_path = os.path.join(base_dir, 'backend', arquivo)
        if not os.path.exists(arquivo_path):
            arquivo_path = os.path.join(os.path.dirname(__file__), '..', '..', arquivo)
        try:
            with open(arquivo_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return self.criar_dieta_padrao()
    def criar_dieta_padrao(self) -> Dict:
        return {
            "calories": {"daily": 2600},
            "daily_meals": {
                "weekdays": {
                    "breakfast": {"time": "06:00", "calories": 520, "items": ["Aveia com frutas", "Caf√© com leite"]},
                    "pre_workout": {"time": "11:00", "calories": 260, "items": ["Banana", "Whey protein"]},
                    "post_workout": {"time": "13:00", "calories": 520, "items": ["Frango grelhado", "Arroz integral"]},
                    "afternoon_snack": {"time": "16:00", "calories": 390, "items": ["Iogurte grego", "Castanhas"]},
                    "dinner": {"time": "20:00", "calories": 650, "items": ["Salm√£o", "Batata doce"]},
                    "evening_snack": {"time": "22:00", "calories": 260, "items": ["Case√≠na", "Am√™ndoas"]}
                }
            }
        }
    def detectar_localizacao_na_mensagem(self, mensagem: str) -> Optional[str]:
        padroes_localizacao = [
            r'estou (no|na|em|perto do|perto da|pr√≥ximo ao|pr√≥ximo da|ao lado do|ao lado da) (.+?)(?:\s+e\s+|\s+o\s+que|\s+qual|\s+onde|\.|$)',
            r'estou em (.+?)(?:\s+e\s+|\s+o\s+que|\s+qual|\s+onde|\.|$)',
            r'aqui (no|na|em) (.+?)(?:\s+e\s+|\s+o\s+que|\s+qual|\s+onde|\.|$)',
            r'me encontro (no|na|em) (.+?)(?:\s+e\s+|\s+o\s+que|\s+qual|\s+onde|\.|$)',
            r'localizado (no|na|em) (.+?)(?:\s+e\s+|\s+o\s+que|\s+qual|\s+onde|\.|$)'
        ]
        for padrao in padroes_localizacao:
            match = re.search(padrao, mensagem.lower())
            if match:
                localizacao = match.groups()[-1].strip()
                localizacao = re.sub(r'[.!?]+$', '', localizacao)
                return localizacao
        pontos_famosos = [
            'coliseu', 'torre eiffel', 'cristo redentor', 'times square', 'big ben',
            'sagrada familia', 'machu picchu', 'taj mahal', 'opera house'
        ]
        for ponto in pontos_famosos:
            if ponto in mensagem.lower():
                if 'coliseu' in mensagem.lower():
                    return 'Colosseum, Rome, Italy'
                elif 'torre eiffel' in mensagem.lower():
                    return 'Eiffel Tower, Paris, France'
                else:
                    return ponto
        return None
    def obter_coordenadas(self, localizacao: str) -> Optional[tuple]:
        try:
            location = self.geolocator.geocode(localizacao, timeout=10)
            if location:
                return (location.latitude, location.longitude)
        except (GeocoderTimedOut, Exception) as e:
            print(f"Erro ao geocodificar {localizacao}: {e}")
        return None
    def buscar_restaurantes_proximos(self, latitude: float, longitude: float, radius: int = 1000) -> List[Dict]:
        try:
            overpass_url = "http://overpass-api.de/api/interpreter"
            overpass_query = f"""
            [out:json][timeout:25];
            (
              node["amenity"="restaurant"](around:{radius},{latitude},{longitude});
              node["amenity"="fast_food"](around:{radius},{latitude},{longitude});
              node["amenity"="cafe"](around:{radius},{latitude},{longitude});
            );
            out body;
            """
            response = requests.get(overpass_url, params={'data': overpass_query}, timeout=30)
            data = response.json()
            restaurantes = []
            for element in data.get('elements', []):
                tags = element.get('tags', {})
                if 'name' in tags:
                    restaurante = {
                        'nome': tags.get('name', 'Restaurante sem nome'),
                        'tipo': tags.get('amenity', 'restaurant'),
                        'cozinha': tags.get('cuisine', 'N√£o especificada'),
                        'latitude': element.get('lat'),
                        'longitude': element.get('lon'),
                        'endereco': tags.get('addr:street', '')
                    }
                    restaurantes.append(restaurante)
            return restaurantes[:10]
        except Exception as e:
            print(f"Erro ao buscar restaurantes: {e}")
            return []
    def processar_com_ia(self, mensagem_usuario: str) -> Dict:
        agora = datetime.datetime.now()
        contexto_temporal = f"Hor√°rio atual: {agora.strftime('%H:%M')} - {agora.strftime('%A, %d/%m/%Y')}"
        historico_recente = "\n".join(self.estado.historico_conversas[-3:]) if self.estado.historico_conversas else "Primeira intera√ß√£o"
        palavras_planejamento = ['planejamento', 'plano', 'card√°pio', 'cardapio', 'me mostre', 'mostra', 'refei√ß√µes', 'refeicoes', 'di√°rio', 'diario']
        is_planejamento = any(palavra in mensagem_usuario.lower() for palavra in palavras_planejamento)
        prompt_completo = f"""
        {self.criar_prompt_agente_ia()}
        CONTEXTO TEMPORAL: {contexto_temporal}
        HIST√ìRICO RECENTE:
        {historico_recente}
        MENSAGEM DO USU√ÅRIO: {mensagem_usuario}
        {'üö® ATEN√á√ÉO: Esta mensagem est√° pedindo PLANEJAMENTO DI√ÅRIO! Voc√™ DEVE mostrar todas as 6 refei√ß√µes detalhadas!' if is_planejamento else ''}
        Como agente IA, interprete esta mensagem e responda adequadamente usando sua intelig√™ncia artificial.
        """
        try:
            response = self.client.chat.completions.create(
                model=self.openai_model,
                messages=[
                    {"role": "system", "content": "Voc√™ √© um agente de IA superinteligente especializado em nutri√ß√£o. SEMPRE retorne APENAS um JSON v√°lido sem explica√ß√µes extras."},
                    {"role": "user", "content": prompt_completo}
                ],
                temperature=0.7,
                max_tokens=1000
            )
            resultado_texto = (response.choices[0].message.content or "").strip()
            try:
                if resultado_texto.startswith('```'):
                    resultado_texto = resultado_texto.split('\n', 1)[1].rsplit('\n', 1)[0]
                inicio_json = resultado_texto.find('{')
                fim_json = resultado_texto.rfind('}') + 1
                if inicio_json != -1 and fim_json != 0:
                    resultado_texto = resultado_texto[inicio_json:fim_json]
                resultado = json.loads(resultado_texto)
                if resultado.get('tipo') == 'registro_refeicao':
                    self.atualizar_estado_nutricional(resultado)
                return resultado
            except json.JSONDecodeError:
                return {
                    "tipo": "conversa_geral",
                    "resposta_usuario": resultado_texto
                }
        except Exception as e:
            return {
                "tipo": "erro",
                "resposta_usuario": f"Desculpe, houve um erro ao processar sua mensagem. Pode tentar novamente? Erro: {str(e)}"
            }
    def atualizar_estado_nutricional(self, resultado: Dict):
        if resultado.get('tipo') == 'registro_refeicao':
            calorias = resultado.get('calorias_estimadas', 0)
            self.estado.calorias_consumidas_dia += calorias
            macros = resultado.get('macros', {})
            self.estado.macros_dia['proteinas'] += macros.get('proteina_g', 0)
            self.estado.macros_dia['carboidratos'] += macros.get('carboidratos_g', 0)
            self.estado.macros_dia['gorduras'] += macros.get('gorduras_g', 0)
            self.estado.macros_dia['fibras'] += macros.get('fibras_g', 0)
            refeicao = {
                'descricao': resultado.get('alimento', ''),
                'horario': datetime.datetime.now().strftime("%H:%M"),
                'calorias': calorias,
                'macros': macros,
                'timestamp': datetime.datetime.now().isoformat()
            }
            self.estado.refeicoes_registradas.append(refeicao)
            self.estado.ultima_refeicao = refeicao
    def criar_prompt_agente_ia(self) -> str:
        return f"""
        Voc√™ √© o SDA (Sistema Digital de Alimenta√ß√£o), um AGENTE DE IA SUPERINTELIGENTE especializado em nutri√ß√£o.
        CARACTER√çSTICAS DO AGENTE:
        - Voc√™ interpreta QUALQUER entrada usando intelig√™ncia artificial
        - N√£o usa regras pr√©-definidas, voc√™ PENSA e DECIDE
        - Voc√™ √© capaz de entender contexto, emo√ß√µes, inten√ß√µes e sutilezas
        - Voc√™ aprende com cada intera√ß√£o e se adapta
        SUAS CAPACIDADES COMO AGENTE IA:
        1. INTERPRETA√á√ÉO INTELIGENTE: Analise a entrada e decida se √©:
           - Registro de refei√ß√£o (qualquer alimento mencionado)
           - Pergunta sobre nutri√ß√£o/planejamento
           - Pedido de orienta√ß√£o
           - Consulta sobre restaurantes/localiza√ß√µes
           - Express√£o de sentimento/frustra√ß√£o
           - Pedido de ajuda ou motiva√ß√£o
        2. EXTRA√á√ÉO DE INFORMA√á√ïES: Se for refei√ß√£o, extraia:
           - Alimento(s) consumido(s)
           - Quantidade aproximada
           - Hor√°rio (se mencionado)
           - Contexto emocional
        3. DETEC√á√ÉO DE LOCALIZA√á√ÉO: Se mencionada localiza√ß√£o, extraia:
           - Local espec√≠fico mencionado
           - Contexto da consulta (buscar restaurante, refei√ß√£o, etc.)
           - Tipo de estabelecimento desejado
        4. C√ÅLCULO NUTRICIONAL: Estime macronutrientes usando sua base de conhecimento
        5. SUGEST√ïES GEOLOCALIZADAS: Para consultas de localiza√ß√£o:
           - Identifique a pr√≥xima refei√ß√£o planejada
           - Considere as calorias necess√°rias para essa refei√ß√£o
           - Sugira pratos espec√≠ficos em restaurantes pr√≥ximos
           - Mantenha o foco nutricional do plano alimentar
        6. AJUSTE AUTOM√ÅTICO DE DIETA: Se perguntado sobre planejamento:
           - Calcule calorias restantes para o dia
           - Ajuste as pr√≥ximas refei√ß√µes automaticamente
           - Redistribua as calorias nas refei√ß√µes restantes
           - Mantenha propor√ß√µes de macronutrientes
        7. RESPOSTA CONTEXTUAL: Gere resposta personalizada considerando:
           - Estado nutricional atual
           - Metas do usu√°rio
           - Contexto emocional
           - Localiza√ß√£o (se mencionada)
           - Hist√≥rico de conversas
        ESTADO NUTRICIONAL ATUAL:
        - Calorias consumidas hoje: {self.estado.calorias_consumidas_dia} kcal
        - Meta di√°ria: {self.metas['calorias_diaria']} kcal
        - Calorias restantes: {self.metas['calorias_diaria'] - self.estado.calorias_consumidas_dia} kcal
        - Status: {'EXCEDEU A META' if self.estado.calorias_consumidas_dia > self.metas['calorias_diaria'] else 'DENTRO DA META'}
        - Prote√≠nas: {self.estado.macros_dia['proteinas']:.1f}g
        - Carboidratos: {self.estado.macros_dia['carboidratos']:.1f}g
        - Gorduras: {self.estado.macros_dia['gorduras']:.1f}g
        - Hidrata√ß√£o: {self.estado.hidratacao_dia}L de {self.metas['hidratacao_diaria']}L
        - Refei√ß√µes registradas hoje: {len(self.estado.refeicoes_registradas)}
        - √öltima refei√ß√£o: {self.estado.ultima_refeicao['descricao'] if self.estado.ultima_refeicao else 'Nenhuma registrada'}
        PLANO ALIMENTAR BASE (ajuste conforme necess√°rio):
        {json.dumps(self.dieta.get('daily_meals', {}), indent=2, ensure_ascii=False)}
        INSTRU√á√ïES PARA PLANEJAMENTO:
        Se o usu√°rio perguntar sobre "planejamento", "plano di√°rio", "card√°pio" ou similar:
        1. Use o plano base acima
        2. Calcule calorias restantes: {self.metas['calorias_diaria']} - {self.estado.calorias_consumidas_dia} = {self.metas['calorias_diaria'] - self.estado.calorias_consumidas_dia} kcal
        3. Ajuste as pr√≥ximas refei√ß√µes redistribuindo as calorias restantes
        4. Mostre TODAS as 6 refei√ß√µes do dia com detalhes completos
        INSTRU√á√ïES DE RESPOSTA:
        1. Se identificar registro de refei√ß√£o, retorne JSON:
        {{
            "tipo": "registro_refeicao",
            "alimento": "descri√ß√£o do alimento",
            "calorias_estimadas": 000,
            "macros": {{
                "proteina_g": 00.0,
                "carboidratos_g": 00.0,
                "gorduras_g": 00.0,
                "fibras_g": 0.0
            }},
            "resposta_usuario": "resposta amig√°vel e contextual"
        }}
        2. Se perguntado sobre planejamento di√°rio, SEMPRE retorne:
        {{
            "tipo": "planejamento_diario",
            "resposta_usuario": "Seu plano alimentar ajustado para hoje:\n\n1. Caf√© da manh√£ (06:00) - 520 kcal\n- 4 ovos (3 claras e 1 inteiro)\n- 2 fatias de p√£o integral\n- 1/3 de abacate\n- 5g de creatina com √°gua\n- Caf√© preto sem a√ß√∫car\n\n2. Pr√©-treino (11:00) - 260 kcal\n- 1 banana\n- 1 dose de whey protein\n\n[CONTINUE COM TODAS AS 6 REFEI√á√ïES]\n\nüìä RESUMO:\nCalorias j√° consumidas: XXX kcal\nCalorias restantes: XXX kcal\nStatus: [DENTRO/EXCEDEU] da meta de 2600 kcal"
        }}
        OBRIGAT√ìRIO: Mostre TODAS as 6 refei√ß√µes completas com alimentos espec√≠ficos, hor√°rios e calorias ajustadas!
        3. Se detectar consulta sobre localiza√ß√£o/restaurantes, retorne JSON:
        {{
            "tipo": "consulta_localizacao",
            "localizacao_detectada": "local mencionado pelo usu√°rio",
            "resposta_usuario": "resposta indicando que vou buscar restaurantes pr√≥ximos"
        }}
        4. Para outras intera√ß√µes, retorne JSON:
        {{
            "tipo": "conversa_geral",
            "resposta_usuario": "resposta completa e contextual"
        }}
        PERSONALIDADE:
        - Amig√°vel e motivacional
        - T√©cnico quando necess√°rio
        - Emp√°tico com deslizes
        - Proativo em sugest√µes
        - Celebra conquistas
        - Usa linguagem natural brasileira
        LEMBRE-SE: Voc√™ √© um AGENTE IA, n√£o um sistema de regras. PENSE, INTERPRETE e RESPONDA!
        """
    def conversar(self, mensagem: str) -> str:
        self.estado.historico_conversas.append(f"Usu√°rio: {mensagem}")
        localizacao = self.detectar_localizacao_na_mensagem(mensagem)
        palavras_comida = ['restaurante', 'comer', 'almo√ß', 'jant', 'lanche', 'refei√ß√£o', 'prato', 'comida', 'onde posso']
        tem_contexto_comida = any(palavra in mensagem.lower() for palavra in palavras_comida)
        if localizacao and tem_contexto_comida:
            resposta = self.processar_consulta_localizacao(mensagem, localizacao)
        else:
            resultado = self.processar_com_ia(mensagem)
            resposta = resultado.get('resposta_usuario', 'Desculpe, n√£o consegui processar sua mensagem.')
        self.estado.historico_conversas.append(f"SDA: {resposta}")
        return resposta
    def processar_consulta_localizacao(self, mensagem: str, localizacao: str) -> str:
        try:
            coordenadas = self.obter_coordenadas(localizacao)
            if not coordenadas:
                return f"N√£o consegui encontrar a localiza√ß√£o '{localizacao}'. Pode tentar ser mais espec√≠fico?"
            latitude, longitude = coordenadas
            restaurantes = self.buscar_restaurantes_proximos(latitude, longitude, radius=2000)
            if not restaurantes:
                return f"N√£o encontrei restaurantes pr√≥ximos ao {localizacao}. Vou te dar sugest√µes gerais para sua pr√≥xima refei√ß√£o."
            proxima_refeicao = self.obter_proxima_refeicao_planejada()
            return self.gerar_sugestoes_geolocalizadas(localizacao, restaurantes, proxima_refeicao, mensagem)
        except Exception as e:
            return f"Houve um erro ao buscar restaurantes. Vou te dar sugest√µes gerais para sua pr√≥xima refei√ß√£o."
    def obter_proxima_refeicao_planejada(self) -> Dict:
        agora = datetime.datetime.now()
        hora_atual = agora.time()
        refeicoes = self.dieta.get('daily_meals', {}).get('weekdays', {})
        refeicoes_ordenadas = []
        for nome, dados in refeicoes.items():
            hora_refeicao = datetime.datetime.strptime(str(dados['time']).zfill(5), '%H:%M').time()
            refeicoes_ordenadas.append((nome, hora_refeicao, dados))
        refeicoes_ordenadas.sort(key=lambda x: x[1])
        for nome, hora, dados in refeicoes_ordenadas:
            if hora > hora_atual:
                return {
                    'nome': nome,
                    'hora': dados['time'],
                    'calorias': dados['calories'],
                    'items': dados.get('items', [])
                }
        if refeicoes_ordenadas:
            nome, hora, dados = refeicoes_ordenadas[0]
            return {
                'nome': nome,
                'hora': dados['time'],
                'calorias': dados['calories'],
                'items': dados.get('items', [])
            }
        return {'nome': 'almo√ßo', 'hora': '12:00', 'calorias': 650, 'items': []}
    def gerar_sugestoes_geolocalizadas(self, localizacao: str, restaurantes: List[Dict], 
                                     proxima_refeicao: Dict, mensagem_original: str) -> str:
        lista_restaurantes = "\n".join([
            f"- {r['nome']} ({r['tipo']}, cozinha: {r['cozinha']})"
            for r in restaurantes[:8]
        ])
        prompt_geolocalizacao = f"""
        Voc√™ √© um nutricionista especializado que est√° ajudando seu paciente a escolher uma refei√ß√£o adequada.
        SITUA√á√ÉO:
        - Paciente est√° localizado pr√≥ximo ao: {localizacao}
        - Pr√≥xima refei√ß√£o planejada: {proxima_refeicao['nome']} √†s {proxima_refeicao['hora']}
        - Calorias necess√°rias para esta refei√ß√£o: {proxima_refeicao['calorias']} kcal
        - Calorias j√° consumidas hoje: {self.estado.calorias_consumidas_dia} kcal
        - Meta di√°ria: {self.metas['calorias_diaria']} kcal
        RESTAURANTES PR√ìXIMOS ENCONTRADOS:
        {lista_restaurantes}
        MENSAGEM ORIGINAL DO PACIENTE:
        {mensagem_original}
        INSTRU√á√ïES:
        1. Escolha 2-3 restaurantes mais adequados da lista
        2. Para cada restaurante, sugira 1-2 pratos espec√≠ficos que:
           - Tenham aproximadamente {proxima_refeicao['calorias']} kcal
           - Sejam nutritivos e equilibrados
           - Sejam t√≠picos do tipo de cozinha do restaurante
        3. D√™ dicas de como ajustar as por√ß√µes se necess√°rio
        4. Mantenha o tom amig√°vel e pr√°tico
        5. Use emojis para tornar a resposta mais visual
        Responda de forma direta e √∫til, como um nutricionista experiente ajudando seu paciente.
        """
        try:
            response = self.client.chat.completions.create(
                model=self.openai_model,
                messages=[
                    {"role": "system", "content": "Voc√™ √© um nutricionista experiente que d√° sugest√µes pr√°ticas e espec√≠ficas. Use linguagem natural brasileira."},
                    {"role": "user", "content": prompt_geolocalizacao}
                ],
                temperature=0.7,
                max_tokens=800
            )
            return (response.choices[0].message.content or "").strip()
        except Exception as e:
            nomes_restaurantes = [r['nome'] for r in restaurantes[:5]]
            return f"""Perfeito! Encontrei restaurantes pr√≥ximos ao {localizacao}!

Restaurantes encontrados:
{chr(10).join([f"‚Ä¢ {nome}" for nome in nomes_restaurantes])}

Para sua pr√≥xima refei√ß√£o ({proxima_refeicao['nome']} - {proxima_refeicao['calorias']} kcal):

Sugest√µes nutricionais:
‚Ä¢ Procure pratos com prote√≠na magra (frango, peixe, carne vermelha magra)
‚Ä¢ Inclua carboidratos complexos (arroz integral, batata, massas)
‚Ä¢ N√£o esque√ßa dos vegetais (saladas, legumes grelhados)
‚Ä¢ Evite frituras e molhos muito cal√≥ricos

Dica: Pe√ßa por√ß√µes moderadas e, se necess√°rio, complemente com uma entrada leve ou divida o prato!

Isso vai manter voc√™ dentro das {proxima_refeicao['calorias']} kcal planejadas para esta refei√ß√£o!"""
    def get_status_nutricional(self) -> Dict:
        return {
            'calorias_consumidas': self.estado.calorias_consumidas_dia,
            'meta_calorias': self.metas['calorias_diaria'],
            'calorias_restantes': self.metas['calorias_diaria'] - self.estado.calorias_consumidas_dia,
            'percentual_meta': (self.estado.calorias_consumidas_dia / self.metas['calorias_diaria']) * 100 if self.metas['calorias_diaria'] else 0,
            'macros_consumidos': self.estado.macros_dia.copy(),
            'refeicoes_hoje': len(self.estado.refeicoes_registradas),
            'refeicoes': self.estado.refeicoes_registradas.copy(),
            'hidratacao': self.estado.hidratacao_dia
        }
    def salvar_estado(self, arquivo: str = None, estado_dict: Dict = None):
        if estado_dict:
            for key, value in estado_dict.items():
                if hasattr(self.estado, key):
                    setattr(self.estado, key, value)
        elif arquivo:
            with open(arquivo, 'w', encoding='utf-8') as f:
                json.dump(asdict(self.estado), f, indent=2, ensure_ascii=False, default=str)
    def carregar_estado(self, arquivo: str = None, estado_dict: Dict = None):
        if estado_dict:
            for key, value in estado_dict.items():
                if hasattr(self.estado, key):
                    setattr(self.estado, key, value)
        elif arquivo:
            try:
                with open(arquivo, 'r', encoding='utf-8') as f:
                    dados = json.load(f)
                    for key, value in dados.items():
                        if hasattr(self.estado, key):
                            setattr(self.estado, key, value)
            except FileNotFoundError:
                pass
    def estado_para_dict(self) -> Dict:
        return asdict(self.estado)
if __name__ == "__main__":
    agente = AgenteSDAInteligente()
    agente.carregar_estado()
    while True:
        try:
            entrada = input("Voc√™: ").strip()
            if entrada.lower() in ['sair', 'quit', 'exit', 'tchau']:
                agente.salvar_estado()
                break
            if entrada.lower() == 'status':
                status = agente.get_status_nutricional()
                print(f"Calorias: {status['calorias_consumidas']:.0f}/{status['meta_calorias']} kcal ({status['percentual_meta']:.1f}%)")
                print(f"Prote√≠nas: {status['macros_consumidos']['proteinas']:.1f}g")
                print(f"Carboidratos: {status['macros_consumidos']['carboidratos']:.1f}g")
                print(f"Gorduras: {status['macros_consumidos']['gorduras']:.1f}g")
                print(f"Refei√ß√µes hoje: {status['refeicoes_hoje']}")
                continue
            if not entrada:
                continue
            resposta = agente.conversar(entrada)
            print(f"\nü§ñ Agente SDA: {resposta}\n")
        except KeyboardInterrupt:
            agente.salvar_estado()
            break
        except Exception as e:
            print(f"\n‚ùå Erro: {e}")
            print("Tente novamente ou digite 'sair' para terminar.\n") 